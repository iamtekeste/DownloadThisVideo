<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon"
          href="https://raw.githubusercontent.com/shalvah/DownloadThisVideo/master/favicon.ico"
          crossorigin="anonymous"
          type="image/x-icon"/>

    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', Calibri, sans-serif;
            height: 100%;
            box-sizing: border-box;
            padding: 20px;
            display: flex;
            flex-direction: column;
            font-size: 1.2em;
        }

        .content {
            flex-grow: 1;
        }

        footer {
            text-align: center;
        }

        a {
            text-decoration: none;
        }

    </style>
    <title>{{ username }}'s downloads by @this_vid</title>
</head>

<body>
<div class="content">
    <h2>{{ username }}'s downloads</h2>
    <p>
        <small>Downloads you've requested via <a href="https://twitter.com/this_vid">@this_vid on Twitter</a> in the
            past 48 hours show up here.</small>
    </p>
    {{#each downloads }}
        <small>{{ this.time }}</small>
        <div><a href="{{ this.videoUrl }}" target="_blank">Video link</a> &bullet; <a
                href="https://twitter.com/statuses/{{ this.tweet }}" target="_blank">View tweet</a></div>
        <br>
    {{/each}}

    <div id="switch_prompt" style="display: none;">
        <small>You've got push notifications for downloads enabled on another device. You can switch to this one, or
            turn off notifications entirely.</small><br>
        <button onclick="requestPermission(this)">Switch notifications to this device</button>
        <button onclick="turnOffNotifications()">Disable all notifications</button>
        <br>
    </div>

    <div id="enable_prompt" style="display: none;">
        <small>Psst! @this_vid can send you a push notification on your device for new downloads, if you'd like.ðŸ’ƒ
            <a
                    href="/p/faq/#notifications">See the FAQ for details.</a></small>
        <br>
        <button onclick="requestPermission(this)">Enable notifications</button>
        <br>
    </div>

    <div id="disable_prompt" style="display: none;">
        <small>You've got push notifications for downloads enabled on this device. </small><br>
        <button onclick="turnOffNotifications()">Disable all notifications</button>
        <br>
    </div>

    <div id="twittersignin" style="display: none;">
        Last step! <a href="/_/starttwittersignin?username={{ username }}">Sign in with Twitter</a> to authorize
        this action.
        <br>
    </div>
</div>
<br>
<footer style="margin-bottom: 0; padding-bottom: 0">
    <div>
        <small>
            <b>Sponsored: </b><a href="{{{ link.url }}}">
            <img
                    src="https://github.com/shalvah/DownloadThisVideo/raw/master/assets/sponsored-logo.png"
                    style="height: 1.7em; vertical-align: middle;">&nbsp;{{ link.text }}</a>
        </small>
    </div>
    <br>
    <div>
        <small>
            <a href="https://www.patreon.com/shalvah">Support @this_vid</a>
            &nbsp;|&nbsp;
            <a href="/p/faq">See the FAQ</a>
            &nbsp;|&nbsp;
            <a href="https://github.com/shalvah/DownloadThisVideo">Check out the source code</a>
        </small>
    </div>
</footer>

<script src="https://www.gstatic.com/firebasejs/6.6.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/6.6.1/firebase-messaging.js"></script>

<script>
    const OSes = {
        macOS: 'macOS',
        windows: "Windows",
        linux: "Linux",
        android: "Android",
        iOS: "iOS",
        unknown: null,
    };

    function getOS() {
        const userAgent = window.navigator.userAgent;
        const platform = window.navigator.platform;
        const macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'];
        const windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'];
        const iosPlatforms = ['iPhone', 'iPad', 'iPod'];
        let os = OSes.unknown;

        if (macosPlatforms.indexOf(platform) !== -1) {
            os = OSes.macOS;
        } else if (iosPlatforms.indexOf(platform) !== -1) {
            os = OSes.iOS;
        } else if (windowsPlatforms.indexOf(platform) !== -1) {
            os = OSes.windows;
        } else if (/Android/.test(userAgent)) {
            os = OSes.android;
        } else if (/Linux/.test(platform)) {
            os = OSes.linux;
        }

        return os;
    }

    const browsers = {
        opera: "Opera",
        IE: "IE",
        chrome: "Chrome",
        safari: "Safari",
        firefox: "Firefox",
        unknown: null,
    };

    function getBrowser() {
        var userAgent = navigator.userAgent;
        var browserName = browsers.unknown;

        if (userAgent.includes("Opera")) {
            browserName = browsers.opera;
        } else if (userAgent.includes("MSIE")) {
            browserName = browsers.IE;
        } else if (userAgent.includes("Chrome")) {
            browserName = browsers.chrome;
        } else if (userAgent.includes("Safari")) {
            browserName = browsers.safari;
        } else if (userAgent.includes("Firefox")) {
            browserName = browsers.firefox;
        }

        return browserName;
    }
</script>

<script>
        {{#if settings.fbToken }}
        window.existingFbToken = "{{ settings.fbToken }}";
        {{/if}}

        {{#if settings.notifications }}
        window.hasNotificationsEnabled = true;
        {{/if}}
</script>

<script>
    function initializeAndConfigurePushNotifications() {

        if (!("serviceWorker" in navigator)) {
            console.log("Service workers not supported.");
            return;
        }

        const os = getOS();
        if ([OSes.iOS, OSes.unknown].includes(os)) {
            console.log("Not supported on " + os);
            return;
        }

        const browser = getBrowser();
        if ([browsers.safari, browsers.IE, browsers.unknown].includes(browser)) {
            console.log("Not supported on " + browser);
            return;
        }

        initializeFirebase();

        initializeNotificationsUI();

        setTokenRefreshHandler();

        setNewMessageHandler();

        markTokenSentIfApplicable();

    }

    function initializeFirebase() {
        var firebaseConfig = {
            apiKey: "AIzaSyCj2NkmY_s5WaIrTppLiXyavurIuFiW9N4",
            projectId: "downloadthisvideo-662ae",
            messagingSenderId: "118497632459",
            appId: "1:118497632459:web:c5a53bf01c2547a9fbfb4e"
        };
        firebase.initializeApp(firebaseConfig);
        window.messaging = firebase.messaging();
        messaging.usePublicVapidKey("BPWZObbrWgRIOpHwSfJBAHh2GLMFcTFX2tYzrBPE5-_yGTeg_EY7bo5naJ2zFLoAZW1Vf5U3wcZUraZLxHA6rWU");

        navigator.serviceWorker.register('/firebase-messaging-sw.js')
                .then(reg => console.log('Registered SW successfully', reg))
                .catch(err => console.log('Failed to register SW', err))
    }

    function setTokenRefreshHandler() {
        messaging.onTokenRefresh(() => {
            messaging.getToken()
                    .then((refreshedToken) => {
                        console.log('Token refreshed.');
                        setTokenSentToServer(false);
                        enableTwitterSignInLink(refreshedToken);
                    })
                    .catch((err) => {
                        console.log('Unable to retrieve refreshed token ', err);
                    });
        });
    }

    function setNewMessageHandler() {
        messaging.onMessage((payload) => {
            console.log('Message received. ', payload);
            if (Notification.permission == 'granted') {
                navigator.serviceWorker.getRegistration().then((reg) => {
                    reg.showNotification(payload.data.title,
                            {body: "Your video's ready!ðŸŽ‰", data: {username: payload.data.username}});
                });
            } else {
                console.log("No notification permission")
            }
        });
    }

    function markTokenSentIfApplicable() {
        const url = new URL(window.location);
        const params = new URLSearchParams(url.search);
        if (params.has('fbt')) {
            messaging.getToken()
                    .then((token) => {
                        if (token === params.get('fbt')) {
                            console.log("Tokens match; saved");
                            setTokenSentToServer(true);
                            location.href = location.origin + location.pathname;
                        } else {
                            console.log("Tokens don't match");
                        }
                    })
                    .catch((err) => {
                        console.log('Unable to retrieve token ', err);
                    });
        }
    }

    function initializeNotificationsUI() {
        messaging.getToken().then((currentToken) => {
            console.log({currentToken});
            if (currentToken) {
                if (window.hasNotificationsEnabled) {
                    const hasNotificationsOnThisDevice = window.existingFbToken && window.existingFbToken === currentToken;
                    if (hasNotificationsOnThisDevice) {
                        // Notifications are enabled for this device
                        showDisableNotificationsPrompt();
                    } else {
                        // They're on a different device
                        showSwitchNotificationsPrompt();
                    }
                } else {
                    // Doesn't have any notifications enabled
                    showEnableNotificationsPrompt();
                }
            } else {
                console.log('No Instance ID token available.');
                showEnableNotificationsPrompt();
            }
        }).catch((err) => {
            console.log('An error occurred while retrieving token. ', err);
            // Abort
            hideEnableNotificationsPrompt();
            hideSwitchNotificationsPrompt();
            hideDisableNotificationsPrompt();
        });
    }

    function hideEnableNotificationsPrompt() {
        document.getElementById('enable_prompt').style.display = "none";
    }

    function hideSwitchNotificationsPrompt() {
        document.getElementById('switch_prompt').style.display = "none";
    }

    function hideDisableNotificationsPrompt() {
        document.getElementById('disable_prompt').style.display = "none";
    }

    function showEnableNotificationsPrompt() {
        document.getElementById('enable_prompt').style.display = "block";
        document.querySelector('#enable_prompt button').disabled = false;
        document.querySelector('#enable_prompt button').textContent = "Enable notifications";
        setTokenSentToServer(false);
    }

    function showSwitchNotificationsPrompt() {
        document.getElementById('switch_prompt').style.display = "block";
        document.querySelector('#switch_prompt button').textContent = "Switch notifications to this device";
        setTokenSentToServer(false);
    }

    function showDisableNotificationsPrompt() {
        document.getElementById('disable_prompt').style.display = "block";
        setTokenSentToServer(true);
    }

    function setTokenSentToServer(sent) {
        window.localStorage.setItem('sentToServer', sent ? '1' : '0');
    }

    function isTokenSentToServer() {
        return window.localStorage.getItem('sentToServer') == '1';
    }

    function requestPermission(button) {
        Notification.requestPermission()
                .then((permission) => {
                    if (permission === 'granted') {
                        console.log('Notification permission granted.');
                        button.disabled = true;
                        button.textContent = "Loading...";

                        messaging.getToken().then((currentToken) => {
                            console.log({currentToken});
                            if (currentToken) {
                                hideEnableNotificationsPrompt();
                                hideSwitchNotificationsPrompt();
                                enableTwitterSignInLink(currentToken);
                            } else {
                                console.log('No Instance ID token available.');
                                // Failed, restore the button
                                window.hasNotificationsEnabled
                                        ? showSwitchNotificationsPrompt()
                                        : showEnableNotificationsPrompt();
                            }
                        }).catch((err) => {
                            console.log('An error occurred while retrieving token. ', err);
                            hideEnableNotificationsPrompt();
                        });
                    } else {
                        console.log('Unable to get permission to notify.');
                    }
                });
    }

    function turnOffNotifications() {
        hideDisableNotificationsPrompt();
        hideSwitchNotificationsPrompt();
        enableTwitterSignInLink(null, 'disable');
    }

    function enableTwitterSignInLink(fbtoken, action = null) {
        if (fbtoken) {
            document.querySelector('#twittersignin a').href += `&fbtoken=${fbtoken}`;
        }
        if (action) {
            document.querySelector('#twittersignin a').href += `&action=${action}`;
        }
        document.querySelector('#twittersignin').style.display = 'block';
    }
</script>

<script>
    initializeAndConfigurePushNotifications();
</script>
</body>
